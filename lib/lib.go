package lib

import (
	"errors"
	"fmt"
	"io"
	"log/slog"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"
)

var Logger *slog.Logger = nil

const (
	INSTALL_PATH_POSTFIX      = "/INSTALL"
	DEPENDENCIES_PATH_POSTFIX = "/DEPENDENCIES"
)

func ParseGlobalDependencies(path string) (res []GlobalDependency, err error) {
	res, err = []GlobalDependency{}, nil

	dependencies, err := parseDependencies(path)
	if err != nil {
		return res, err
	}

	for _, dep := range dependencies {
		res = append(res, newGlobalDependency(&dep))
	}

	return res, err
}

func installGlobalDependency(dep GlobalDependency) (info installInfo, err error) {
	info, err = installInfo{}, nil

	cmd, err := install(*dep.Instruction)
	if err != nil {
		return info, err
	}

	{
		info.InstallInstruction = cmd
		info.DependenciesInstalled = true
		info.InstallTime = now()
		info.IsInstalled = true
		info.WasUninstalled = false
		info.UninstallInstructions = []string{}
		info.UninstallTime = ""
	}

	return info, err
}

func ParseRequirements(path string) (res *requirements, err error) {
	Logger.Debug("parsing requirements", "path", path)
	res = &requirements{}
	{
		Logger.Debug("parsing installation instructions")
		installationInstructions, err := parseInstallInstructions(path)
		if err != nil {
			return nil, err
		}
		if installationInstructions != nil {
			res.Install = installationInstructions
		}
	}

	{
		Logger.Debug("parsing dependencies")
		dependencies, err := parseDependencies(path)
		if err != nil {
			return nil, err
		}
		res.Dependencies = dependencies
	}

	return res, err
}

func now() string {
	return time.Now().UTC().Format(time.DateTime)
}

func installDependencies(dependencies []installInstruction) error {
	for _, dep := range dependencies {
		_, err := install(dep)
		if err != nil {
			return err
		}
	}
	return nil
}

func install(inst installInstruction) (cmd string, err error) {
	Assert(!inst.Method.IsEmpty(), fmt.Sprintf("at this point we should always have valid installation instructions, got: '%v'", inst))

	Logger.Info("going to install a pkg", "method", inst.Method, "pkg", inst.Pkg)
	cmd, err = inst.Method.CreateInstallCmd(inst.Pkg)
	Logger.Info("got install cmd", "cmd", cmd)
	if err != nil {
		return cmd, err
	}

	err = execute(cmd)
	return cmd, err
}

func execute(cmd string) error {
	splitCmd := strings.Split(cmd, " ")
	{
		execCmd := exec.Command(splitCmd[0], splitCmd[1:]...)
		execCmd.Stderr = os.Stderr
		execCmd.Stdin = os.Stdin
		execCmd.Stdout = os.Stdout
		// BUG: if user does C-c here, then stdin/stdout/stderr might not get released
		err := execCmd.Start()
		if err != nil {
			return nil
		}
		err = execCmd.Wait()
		if err != nil {
			return err
		}
	}

	Logger.Info("Successfully installed", "cmd", cmd)
	return nil
}

func runUninstallScriptIfItExists(cfg Config, info *installInfo) {
	idx := strings.LastIndex(cfg.From, "/")
	from := cfg.From
	path := from[:idx] + "/." + from[idx+1:] + "/UNINSTALL"
	Logger.Debug("checking if UNINSTALL exists", "path", path)
	f, err := os.Open(path)
	if err != nil {
		Logger.Debug("UNINSTALL not found", "path", path)
		return
	}
	f.Close()
	Logger.Info("running the /UNINSTALL script", "path", path)
	cmd := exec.Command("bash", path)
	cmd.Stdout = os.Stdout
	cmd.Stdin = os.Stdin
	cmd.Stderr = os.Stderr
	err = cmd.Run()
	if err != nil {
		return
	}
	{
		info.IsInstalled = false
		info.DependenciesInstalled = false
		info.InstallInstruction = ""
		info.InstallTime = ""
		info.UninstallInstructions = append(info.UninstallInstructions, "bash "+path)
		info.WasUninstalled = true
		info.UninstallTime = now()
	}
}

func uninstallForCfg(cfg Config) *installInfo {
	if cfg.InstallInfo.WasUninstalled {
		Logger.Debug("skipping uninstallation of already uninstalled packages for config", "cfgName", cfg.Name)
		return nil
	}

	info := installInfo{}
	runUninstallScriptIfItExists(cfg, &info)

	if cfg.Requirements.Install == nil {
		return &info
	}
	Logger.Info("uninstalling using inferred instructions (from the method found during installation)", "cfgName", cfg.Name)

	cmd, err := uninstall(cfg.Requirements.Install)
	if err != nil {
		Logger.Debug("something went wrong while uninstalling dependencies using the autogenerated command based on the installation method, trying to continue", "cfgName", cfg.Name, "err", err)
		return &info
	}

	info.UninstallTime = now()
	info.UninstallInstructions = append(info.UninstallInstructions, cmd)
	info.WasUninstalled = true
	info.InstallTime = ""
	info.InstallInstruction = ""
	info.IsInstalled = false

	return &info

	// TODO: uninstall dependencies here
	// info.DependenciesInstalled = false

}

func uninstall(inst *installInstruction) (cmd string, err error) {
	Assert(!inst.Method.IsEmpty(), fmt.Sprintf("at this point we should always have valid uninstall instructions, got: '%v'", inst))

	Logger.Info("going to uninstall a pkg", "method", inst.Method, "pkg", inst.Pkg)
	cmd, err = inst.Method.CreateUninstallCmd(inst.Pkg)
	Logger.Info("got uninstall cmd", "cmd", cmd)
	if err != nil {
		return cmd, err
	}

	err = execute(cmd)
	return cmd, err
}

func Assert(condition bool, message string) {
	if !condition {
		panic(message)
	}
}

func removeCfg(from string) error {
	return os.RemoveAll(from)
}

func symlink(from, to string) error {
	_, err := os.Stat(from)
	if err != nil {
		return err
	}
	_, err = os.Stat(to)
	if err != nil {
		if !os.IsNotExist(err) {
			return nil
		}
	}

	err = os.Symlink(from, to)
	if err != nil {
		if os.IsExist(err) {
			err := os.RemoveAll(to)
			if err != nil {
				return err
			}
			err = os.Symlink(from, to)
		} else {
			return err
		}
	}
	return nil
}

func copyCfg(from, to string) error {
	info, err := os.Stat(from)
	if err != nil {
		return err
	}
	if info.IsDir() {
		err = copyDir(from, to)
	} else {
		err = copyFile(from, to)
	}
	return err
}

// if file doesn't exist then that is still considered as not a symlink (and no error)
func isSymlink(path string) (bool, error) {
	info, err := os.Lstat(path)
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, err
	}

	return info.Mode()&os.ModeSymlink != 0, nil
}

func copyDir(from, to string) error {
	infoFrom, err := os.Stat(from)
	if err != nil {
		return err
	}
	{
		link, err := isSymlink(to)
		if err != nil {
			return err
		}
		if link {
			err = os.Remove(to)
			if err != nil {
				return err
			}
		}
	}
	infoTo, err := os.Stat(to)
	if err != nil {
		if os.IsNotExist(err) {
			err = os.MkdirAll(to, infoFrom.Mode())
			if err != nil {
				return err
			}
		} else {
			return err
		}
	}

	infoTo, err = os.Stat(to)
	if err != nil {
		return err
	}

	if !infoFrom.IsDir() {
		return errors.New("from is not a directory")
	}
	if !infoTo.IsDir() {
		return errors.New("to is not a directory")
	}

	entries, err := os.ReadDir(from)
	if err != nil {
		return err
	}

	for _, e := range entries {
		name := e.Name()
		fromPath := filepath.Join(from, name)
		toPath := filepath.Join(to, name)

		if e.IsDir() {
			err = copyDir(fromPath, toPath)
			if err != nil {
				return err
			}
		} else {
			err = copyFile(fromPath, toPath)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

func copyFile(from, to string) error {
	inputFile, err := os.Open(from)
	if err != nil {
		return err
	}
	defer inputFile.Close()

	outputFile, err := os.Create(to)
	if err != nil {
		return err
	}
	defer outputFile.Close()

	_, err = io.Copy(outputFile, inputFile)
	return err
}
